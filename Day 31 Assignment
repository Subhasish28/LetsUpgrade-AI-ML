Question 1:
Use IRIS dataset from Sklearn and perform KNN. Compare with logistic regression.

Answer:
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input 
#directory

from subprocess import check_output
print(check_output(["ls", "../input"]).decode("utf8"))

# Any results you write to the current directory are saved as output.
Iris.csv
database.sqlite

import matplotlib.pyplot as plt
import seaborn as sns
for keys in iris.keys() :
    print(keys)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-3-67bed89905f2> in <module>()
----> 1 for keys in iris.keys() :
      2     print(keys)

NameError: name 'iris' is not defined
#load the iris data as it is well known so we have it in our sklearn datasets 
#other wise its csv file can also be called and read with the help of pandas
from sklearn.datasets import load_iris
iris=load_iris()
#target of iris data .. see as it is a numoy array so it understands only numerical value thus we 
# have 0,1,2 one for each three types of flowers 
print(iris['target'])
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2]
#data means the values we are using to interpreate type of flower or you can say features .
# these are sepal length length and petal width here and petal length and petal width.
print(iris['data'])
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]
 [ 5.4  3.9  1.7  0.4]
 [ 4.6  3.4  1.4  0.3]
 [ 5.   3.4  1.5  0.2]
 [ 4.4  2.9  1.4  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 5.4  3.7  1.5  0.2]
 [ 4.8  3.4  1.6  0.2]
 [ 4.8  3.   1.4  0.1]
 [ 4.3  3.   1.1  0.1]
 [ 5.8  4.   1.2  0.2]
 [ 5.7  4.4  1.5  0.4]
 [ 5.4  3.9  1.3  0.4]
 [ 5.1  3.5  1.4  0.3]
 [ 5.7  3.8  1.7  0.3]
 [ 5.1  3.8  1.5  0.3]
 [ 5.4  3.4  1.7  0.2]
 [ 5.1  3.7  1.5  0.4]
 [ 4.6  3.6  1.   0.2]
 [ 5.1  3.3  1.7  0.5]
 [ 4.8  3.4  1.9  0.2]
 [ 5.   3.   1.6  0.2]
 [ 5.   3.4  1.6  0.4]
 [ 5.2  3.5  1.5  0.2]
 [ 5.2  3.4  1.4  0.2]
 [ 4.7  3.2  1.6  0.2]
 [ 4.8  3.1  1.6  0.2]
 [ 5.4  3.4  1.5  0.4]
 [ 5.2  4.1  1.5  0.1]
 [ 5.5  4.2  1.4  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 5.   3.2  1.2  0.2]
 [ 5.5  3.5  1.3  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 4.4  3.   1.3  0.2]
 [ 5.1  3.4  1.5  0.2]
 [ 5.   3.5  1.3  0.3]
 [ 4.5  2.3  1.3  0.3]
 [ 4.4  3.2  1.3  0.2]
 [ 5.   3.5  1.6  0.6]
 [ 5.1  3.8  1.9  0.4]
 [ 4.8  3.   1.4  0.3]
 [ 5.1  3.8  1.6  0.2]
 [ 4.6  3.2  1.4  0.2]
 [ 5.3  3.7  1.5  0.2]
 [ 5.   3.3  1.4  0.2]
 [ 7.   3.2  4.7  1.4]
 [ 6.4  3.2  4.5  1.5]
 [ 6.9  3.1  4.9  1.5]
 [ 5.5  2.3  4.   1.3]
 [ 6.5  2.8  4.6  1.5]
 [ 5.7  2.8  4.5  1.3]
 [ 6.3  3.3  4.7  1.6]
 [ 4.9  2.4  3.3  1. ]
 [ 6.6  2.9  4.6  1.3]
 [ 5.2  2.7  3.9  1.4]
 [ 5.   2.   3.5  1. ]
 [ 5.9  3.   4.2  1.5]
 [ 6.   2.2  4.   1. ]
 [ 6.1  2.9  4.7  1.4]
 [ 5.6  2.9  3.6  1.3]
 [ 6.7  3.1  4.4  1.4]
 [ 5.6  3.   4.5  1.5]
 [ 5.8  2.7  4.1  1. ]
 [ 6.2  2.2  4.5  1.5]
 [ 5.6  2.5  3.9  1.1]
 [ 5.9  3.2  4.8  1.8]
 [ 6.1  2.8  4.   1.3]
 [ 6.3  2.5  4.9  1.5]
 [ 6.1  2.8  4.7  1.2]
 [ 6.4  2.9  4.3  1.3]
 [ 6.6  3.   4.4  1.4]
 [ 6.8  2.8  4.8  1.4]
 [ 6.7  3.   5.   1.7]
 [ 6.   2.9  4.5  1.5]
 [ 5.7  2.6  3.5  1. ]
 [ 5.5  2.4  3.8  1.1]
 [ 5.5  2.4  3.7  1. ]
 [ 5.8  2.7  3.9  1.2]
 [ 6.   2.7  5.1  1.6]
 [ 5.4  3.   4.5  1.5]
 [ 6.   3.4  4.5  1.6]
 [ 6.7  3.1  4.7  1.5]
 [ 6.3  2.3  4.4  1.3]
 [ 5.6  3.   4.1  1.3]
 [ 5.5  2.5  4.   1.3]
 [ 5.5  2.6  4.4  1.2]
 [ 6.1  3.   4.6  1.4]
 [ 5.8  2.6  4.   1.2]
 [ 5.   2.3  3.3  1. ]
 [ 5.6  2.7  4.2  1.3]
 [ 5.7  3.   4.2  1.2]
 [ 5.7  2.9  4.2  1.3]
 [ 6.2  2.9  4.3  1.3]
 [ 5.1  2.5  3.   1.1]
 [ 5.7  2.8  4.1  1.3]
 [ 6.3  3.3  6.   2.5]
 [ 5.8  2.7  5.1  1.9]
 [ 7.1  3.   5.9  2.1]
 [ 6.3  2.9  5.6  1.8]
 [ 6.5  3.   5.8  2.2]
 [ 7.6  3.   6.6  2.1]
 [ 4.9  2.5  4.5  1.7]
 [ 7.3  2.9  6.3  1.8]
 [ 6.7  2.5  5.8  1.8]
 [ 7.2  3.6  6.1  2.5]
 [ 6.5  3.2  5.1  2. ]
 [ 6.4  2.7  5.3  1.9]
 [ 6.8  3.   5.5  2.1]
 [ 5.7  2.5  5.   2. ]
 [ 5.8  2.8  5.1  2.4]
 [ 6.4  3.2  5.3  2.3]
 [ 6.5  3.   5.5  1.8]
 [ 7.7  3.8  6.7  2.2]
 [ 7.7  2.6  6.9  2.3]
 [ 6.   2.2  5.   1.5]
 [ 6.9  3.2  5.7  2.3]
 [ 5.6  2.8  4.9  2. ]
 [ 7.7  2.8  6.7  2. ]
 [ 6.3  2.7  4.9  1.8]
 [ 6.7  3.3  5.7  2.1]
 [ 7.2  3.2  6.   1.8]
 [ 6.2  2.8  4.8  1.8]
 [ 6.1  3.   4.9  1.8]
 [ 6.4  2.8  5.6  2.1]
 [ 7.2  3.   5.8  1.6]
 [ 7.4  2.8  6.1  1.9]
 [ 7.9  3.8  6.4  2. ]
 [ 6.4  2.8  5.6  2.2]
 [ 6.3  2.8  5.1  1.5]
 [ 6.1  2.6  5.6  1.4]
 [ 7.7  3.   6.1  2.3]
 [ 6.3  3.4  5.6  2.4]
 [ 6.4  3.1  5.5  1.8]
 [ 6.   3.   4.8  1.8]
 [ 6.9  3.1  5.4  2.1]
 [ 6.7  3.1  5.6  2.4]
 [ 6.9  3.1  5.1  2.3]
 [ 5.8  2.7  5.1  1.9]
 [ 6.8  3.2  5.9  2.3]
 [ 6.7  3.3  5.7  2.5]
 [ 6.7  3.   5.2  2.3]
 [ 6.3  2.5  5.   1.9]
 [ 6.5  3.   5.2  2. ]
 [ 6.2  3.4  5.4  2.3]
 [ 5.9  3.   5.1  1.8]]
X= iris.data
y=iris.target
#let"s check the size of iris data and its target
print(len(iris.data))
print(len(iris.target))
150
150
plt.plot(X,y)
plt.show()

print(iris.feature_names)
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
# Reformat column names
import re
new_feature = []
for feature in iris['feature_names']:
    new_feature.append(re.sub(r'(\w+) (\w+) \((\w+)\)',r'\1_\2_\3',feature))
print(new_feature)
['sepal_length_cm', 'sepal_width_cm', 'petal_length_cm', 'petal_width_cm']
#importing k neighbour classifier
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=1)
print(knn)
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
knn.fit(X,y)
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
X.reshape(1,-1)
array([[ 5.1,  3.5,  1.4,  0.2,  4.9,  3. ,  1.4,  0.2,  4.7,  3.2,  1.3,
         0.2,  4.6,  3.1,  1.5,  0.2,  5. ,  3.6,  1.4,  0.2,  5.4,  3.9,
         1.7,  0.4,  4.6,  3.4,  1.4,  0.3,  5. ,  3.4,  1.5,  0.2,  4.4,
         2.9,  1.4,  0.2,  4.9,  3.1,  1.5,  0.1,  5.4,  3.7,  1.5,  0.2,
         4.8,  3.4,  1.6,  0.2,  4.8,  3. ,  1.4,  0.1,  4.3,  3. ,  1.1,
         0.1,  5.8,  4. ,  1.2,  0.2,  5.7,  4.4,  1.5,  0.4,  5.4,  3.9,
         1.3,  0.4,  5.1,  3.5,  1.4,  0.3,  5.7,  3.8,  1.7,  0.3,  5.1,
         3.8,  1.5,  0.3,  5.4,  3.4,  1.7,  0.2,  5.1,  3.7,  1.5,  0.4,
         4.6,  3.6,  1. ,  0.2,  5.1,  3.3,  1.7,  0.5,  4.8,  3.4,  1.9,
         0.2,  5. ,  3. ,  1.6,  0.2,  5. ,  3.4,  1.6,  0.4,  5.2,  3.5,
         1.5,  0.2,  5.2,  3.4,  1.4,  0.2,  4.7,  3.2,  1.6,  0.2,  4.8,
         3.1,  1.6,  0.2,  5.4,  3.4,  1.5,  0.4,  5.2,  4.1,  1.5,  0.1,
         5.5,  4.2,  1.4,  0.2,  4.9,  3.1,  1.5,  0.1,  5. ,  3.2,  1.2,
         0.2,  5.5,  3.5,  1.3,  0.2,  4.9,  3.1,  1.5,  0.1,  4.4,  3. ,
         1.3,  0.2,  5.1,  3.4,  1.5,  0.2,  5. ,  3.5,  1.3,  0.3,  4.5,
         2.3,  1.3,  0.3,  4.4,  3.2,  1.3,  0.2,  5. ,  3.5,  1.6,  0.6,
         5.1,  3.8,  1.9,  0.4,  4.8,  3. ,  1.4,  0.3,  5.1,  3.8,  1.6,
         0.2,  4.6,  3.2,  1.4,  0.2,  5.3,  3.7,  1.5,  0.2,  5. ,  3.3,
         1.4,  0.2,  7. ,  3.2,  4.7,  1.4,  6.4,  3.2,  4.5,  1.5,  6.9,
         3.1,  4.9,  1.5,  5.5,  2.3,  4. ,  1.3,  6.5,  2.8,  4.6,  1.5,
         5.7,  2.8,  4.5,  1.3,  6.3,  3.3,  4.7,  1.6,  4.9,  2.4,  3.3,
         1. ,  6.6,  2.9,  4.6,  1.3,  5.2,  2.7,  3.9,  1.4,  5. ,  2. ,
         3.5,  1. ,  5.9,  3. ,  4.2,  1.5,  6. ,  2.2,  4. ,  1. ,  6.1,
         2.9,  4.7,  1.4,  5.6,  2.9,  3.6,  1.3,  6.7,  3.1,  4.4,  1.4,
         5.6,  3. ,  4.5,  1.5,  5.8,  2.7,  4.1,  1. ,  6.2,  2.2,  4.5,
         1.5,  5.6,  2.5,  3.9,  1.1,  5.9,  3.2,  4.8,  1.8,  6.1,  2.8,
         4. ,  1.3,  6.3,  2.5,  4.9,  1.5,  6.1,  2.8,  4.7,  1.2,  6.4,
         2.9,  4.3,  1.3,  6.6,  3. ,  4.4,  1.4,  6.8,  2.8,  4.8,  1.4,
         6.7,  3. ,  5. ,  1.7,  6. ,  2.9,  4.5,  1.5,  5.7,  2.6,  3.5,
         1. ,  5.5,  2.4,  3.8,  1.1,  5.5,  2.4,  3.7,  1. ,  5.8,  2.7,
         3.9,  1.2,  6. ,  2.7,  5.1,  1.6,  5.4,  3. ,  4.5,  1.5,  6. ,
         3.4,  4.5,  1.6,  6.7,  3.1,  4.7,  1.5,  6.3,  2.3,  4.4,  1.3,
         5.6,  3. ,  4.1,  1.3,  5.5,  2.5,  4. ,  1.3,  5.5,  2.6,  4.4,
         1.2,  6.1,  3. ,  4.6,  1.4,  5.8,  2.6,  4. ,  1.2,  5. ,  2.3,
         3.3,  1. ,  5.6,  2.7,  4.2,  1.3,  5.7,  3. ,  4.2,  1.2,  5.7,
         2.9,  4.2,  1.3,  6.2,  2.9,  4.3,  1.3,  5.1,  2.5,  3. ,  1.1,
         5.7,  2.8,  4.1,  1.3,  6.3,  3.3,  6. ,  2.5,  5.8,  2.7,  5.1,
         1.9,  7.1,  3. ,  5.9,  2.1,  6.3,  2.9,  5.6,  1.8,  6.5,  3. ,
         5.8,  2.2,  7.6,  3. ,  6.6,  2.1,  4.9,  2.5,  4.5,  1.7,  7.3,
         2.9,  6.3,  1.8,  6.7,  2.5,  5.8,  1.8,  7.2,  3.6,  6.1,  2.5,
         6.5,  3.2,  5.1,  2. ,  6.4,  2.7,  5.3,  1.9,  6.8,  3. ,  5.5,
         2.1,  5.7,  2.5,  5. ,  2. ,  5.8,  2.8,  5.1,  2.4,  6.4,  3.2,
         5.3,  2.3,  6.5,  3. ,  5.5,  1.8,  7.7,  3.8,  6.7,  2.2,  7.7,
         2.6,  6.9,  2.3,  6. ,  2.2,  5. ,  1.5,  6.9,  3.2,  5.7,  2.3,
         5.6,  2.8,  4.9,  2. ,  7.7,  2.8,  6.7,  2. ,  6.3,  2.7,  4.9,
         1.8,  6.7,  3.3,  5.7,  2.1,  7.2,  3.2,  6. ,  1.8,  6.2,  2.8,
         4.8,  1.8,  6.1,  3. ,  4.9,  1.8,  6.4,  2.8,  5.6,  2.1,  7.2,
         3. ,  5.8,  1.6,  7.4,  2.8,  6.1,  1.9,  7.9,  3.8,  6.4,  2. ,
         6.4,  2.8,  5.6,  2.2,  6.3,  2.8,  5.1,  1.5,  6.1,  2.6,  5.6,
         1.4,  7.7,  3. ,  6.1,  2.3,  6.3,  3.4,  5.6,  2.4,  6.4,  3.1,
         5.5,  1.8,  6. ,  3. ,  4.8,  1.8,  6.9,  3.1,  5.4,  2.1,  6.7,
         3.1,  5.6,  2.4,  6.9,  3.1,  5.1,  2.3,  5.8,  2.7,  5.1,  1.9,
         6.8,  3.2,  5.9,  2.3,  6.7,  3.3,  5.7,  2.5,  6.7,  3. ,  5.2,
         2.3,  6.3,  2.5,  5. ,  1.9,  6.5,  3. ,  5.2,  2. ,  6.2,  3.4,
         5.4,  2.3,  5.9,  3. ,  5.1,  1.8]])
len(iris.data)
150
len(iris.target)
150
X.reshape(-1,1)
array([[ 5.1],
       [ 3.5],
       [ 1.4],
       [ 0.2],
       [ 4.9],
       [ 3. ],
       [ 1.4],
       [ 0.2],
       [ 4.7],
       [ 3.2],
       [ 1.3],
       [ 0.2],
       [ 4.6],
       [ 3.1],
       [ 1.5],
       [ 0.2],
       [ 5. ],
       [ 3.6],
       [ 1.4],
       [ 0.2],
       [ 5.4],
       [ 3.9],
       [ 1.7],
       [ 0.4],
       [ 4.6],
       [ 3.4],
       [ 1.4],
       [ 0.3],
       [ 5. ],
       [ 3.4],
       [ 1.5],
       [ 0.2],
       [ 4.4],
       [ 2.9],
       [ 1.4],
       [ 0.2],
       [ 4.9],
       [ 3.1],
       [ 1.5],
       [ 0.1],
       [ 5.4],
       [ 3.7],
       [ 1.5],
       [ 0.2],
       [ 4.8],
       [ 3.4],
       [ 1.6],
       [ 0.2],
       [ 4.8],
       [ 3. ],
       [ 1.4],
       [ 0.1],
       [ 4.3],
       [ 3. ],
       [ 1.1],
       [ 0.1],
       [ 5.8],
       [ 4. ],
       [ 1.2],
       [ 0.2],
       [ 5.7],
       [ 4.4],
       [ 1.5],
       [ 0.4],
       [ 5.4],
       [ 3.9],
       [ 1.3],
       [ 0.4],
       [ 5.1],
       [ 3.5],
       [ 1.4],
       [ 0.3],
       [ 5.7],
       [ 3.8],
       [ 1.7],
       [ 0.3],
       [ 5.1],
       [ 3.8],
       [ 1.5],
       [ 0.3],
       [ 5.4],
       [ 3.4],
       [ 1.7],
       [ 0.2],
       [ 5.1],
       [ 3.7],
       [ 1.5],
       [ 0.4],
       [ 4.6],
       [ 3.6],
       [ 1. ],
       [ 0.2],
       [ 5.1],
       [ 3.3],
       [ 1.7],
       [ 0.5],
       [ 4.8],
       [ 3.4],
       [ 1.9],
       [ 0.2],
       [ 5. ],
       [ 3. ],
       [ 1.6],
       [ 0.2],
       [ 5. ],
       [ 3.4],
       [ 1.6],
       [ 0.4],
       [ 5.2],
       [ 3.5],
       [ 1.5],
       [ 0.2],
       [ 5.2],
       [ 3.4],
       [ 1.4],
       [ 0.2],
       [ 4.7],
       [ 3.2],
       [ 1.6],
       [ 0.2],
       [ 4.8],
       [ 3.1],
       [ 1.6],
       [ 0.2],
       [ 5.4],
       [ 3.4],
       [ 1.5],
       [ 0.4],
       [ 5.2],
       [ 4.1],
       [ 1.5],
       [ 0.1],
       [ 5.5],
       [ 4.2],
       [ 1.4],
       [ 0.2],
       [ 4.9],
       [ 3.1],
       [ 1.5],
       [ 0.1],
       [ 5. ],
       [ 3.2],
       [ 1.2],
       [ 0.2],
       [ 5.5],
       [ 3.5],
       [ 1.3],
       [ 0.2],
       [ 4.9],
       [ 3.1],
       [ 1.5],
       [ 0.1],
       [ 4.4],
       [ 3. ],
       [ 1.3],
       [ 0.2],
       [ 5.1],
       [ 3.4],
       [ 1.5],
       [ 0.2],
       [ 5. ],
       [ 3.5],
       [ 1.3],
       [ 0.3],
       [ 4.5],
       [ 2.3],
       [ 1.3],
       [ 0.3],
       [ 4.4],
       [ 3.2],
       [ 1.3],
       [ 0.2],
       [ 5. ],
       [ 3.5],
       [ 1.6],
       [ 0.6],
       [ 5.1],
       [ 3.8],
       [ 1.9],
       [ 0.4],
       [ 4.8],
       [ 3. ],
       [ 1.4],
       [ 0.3],
       [ 5.1],
       [ 3.8],
       [ 1.6],
       [ 0.2],
       [ 4.6],
       [ 3.2],
       [ 1.4],
       [ 0.2],
       [ 5.3],
       [ 3.7],
       [ 1.5],
       [ 0.2],
       [ 5. ],
       [ 3.3],
       [ 1.4],
       [ 0.2],
       [ 7. ],
       [ 3.2],
       [ 4.7],
       [ 1.4],
       [ 6.4],
       [ 3.2],
       [ 4.5],
       [ 1.5],
       [ 6.9],
       [ 3.1],
       [ 4.9],
       [ 1.5],
       [ 5.5],
       [ 2.3],
       [ 4. ],
       [ 1.3],
       [ 6.5],
       [ 2.8],
       [ 4.6],
       [ 1.5],
       [ 5.7],
       [ 2.8],
       [ 4.5],
       [ 1.3],
       [ 6.3],
       [ 3.3],
       [ 4.7],
       [ 1.6],
       [ 4.9],
       [ 2.4],
       [ 3.3],
       [ 1. ],
       [ 6.6],
       [ 2.9],
       [ 4.6],
       [ 1.3],
       [ 5.2],
       [ 2.7],
       [ 3.9],
       [ 1.4],
       [ 5. ],
       [ 2. ],
       [ 3.5],
       [ 1. ],
       [ 5.9],
       [ 3. ],
       [ 4.2],
       [ 1.5],
       [ 6. ],
       [ 2.2],
       [ 4. ],
       [ 1. ],
       [ 6.1],
       [ 2.9],
       [ 4.7],
       [ 1.4],
       [ 5.6],
       [ 2.9],
       [ 3.6],
       [ 1.3],
       [ 6.7],
       [ 3.1],
       [ 4.4],
       [ 1.4],
       [ 5.6],
       [ 3. ],
       [ 4.5],
       [ 1.5],
       [ 5.8],
       [ 2.7],
       [ 4.1],
       [ 1. ],
       [ 6.2],
       [ 2.2],
       [ 4.5],
       [ 1.5],
       [ 5.6],
       [ 2.5],
       [ 3.9],
       [ 1.1],
       [ 5.9],
       [ 3.2],
       [ 4.8],
       [ 1.8],
       [ 6.1],
       [ 2.8],
       [ 4. ],
       [ 1.3],
       [ 6.3],
       [ 2.5],
       [ 4.9],
       [ 1.5],
       [ 6.1],
       [ 2.8],
       [ 4.7],
       [ 1.2],
       [ 6.4],
       [ 2.9],
       [ 4.3],
       [ 1.3],
       [ 6.6],
       [ 3. ],
       [ 4.4],
       [ 1.4],
       [ 6.8],
       [ 2.8],
       [ 4.8],
       [ 1.4],
       [ 6.7],
       [ 3. ],
       [ 5. ],
       [ 1.7],
       [ 6. ],
       [ 2.9],
       [ 4.5],
       [ 1.5],
       [ 5.7],
       [ 2.6],
       [ 3.5],
       [ 1. ],
       [ 5.5],
       [ 2.4],
       [ 3.8],
       [ 1.1],
       [ 5.5],
       [ 2.4],
       [ 3.7],
       [ 1. ],
       [ 5.8],
       [ 2.7],
       [ 3.9],
       [ 1.2],
       [ 6. ],
       [ 2.7],
       [ 5.1],
       [ 1.6],
       [ 5.4],
       [ 3. ],
       [ 4.5],
       [ 1.5],
       [ 6. ],
       [ 3.4],
       [ 4.5],
       [ 1.6],
       [ 6.7],
       [ 3.1],
       [ 4.7],
       [ 1.5],
       [ 6.3],
       [ 2.3],
       [ 4.4],
       [ 1.3],
       [ 5.6],
       [ 3. ],
       [ 4.1],
       [ 1.3],
       [ 5.5],
       [ 2.5],
       [ 4. ],
       [ 1.3],
       [ 5.5],
       [ 2.6],
       [ 4.4],
       [ 1.2],
       [ 6.1],
       [ 3. ],
       [ 4.6],
       [ 1.4],
       [ 5.8],
       [ 2.6],
       [ 4. ],
       [ 1.2],
       [ 5. ],
       [ 2.3],
       [ 3.3],
       [ 1. ],
       [ 5.6],
       [ 2.7],
       [ 4.2],
       [ 1.3],
       [ 5.7],
       [ 3. ],
       [ 4.2],
       [ 1.2],
       [ 5.7],
       [ 2.9],
       [ 4.2],
       [ 1.3],
       [ 6.2],
       [ 2.9],
       [ 4.3],
       [ 1.3],
       [ 5.1],
       [ 2.5],
       [ 3. ],
       [ 1.1],
       [ 5.7],
       [ 2.8],
       [ 4.1],
       [ 1.3],
       [ 6.3],
       [ 3.3],
       [ 6. ],
       [ 2.5],
       [ 5.8],
       [ 2.7],
       [ 5.1],
       [ 1.9],
       [ 7.1],
       [ 3. ],
       [ 5.9],
       [ 2.1],
       [ 6.3],
       [ 2.9],
       [ 5.6],
       [ 1.8],
       [ 6.5],
       [ 3. ],
       [ 5.8],
       [ 2.2],
       [ 7.6],
       [ 3. ],
       [ 6.6],
       [ 2.1],
       [ 4.9],
       [ 2.5],
       [ 4.5],
       [ 1.7],
       [ 7.3],
       [ 2.9],
       [ 6.3],
       [ 1.8],
       [ 6.7],
       [ 2.5],
       [ 5.8],
       [ 1.8],
       [ 7.2],
       [ 3.6],
       [ 6.1],
       [ 2.5],
       [ 6.5],
       [ 3.2],
       [ 5.1],
       [ 2. ],
       [ 6.4],
       [ 2.7],
       [ 5.3],
       [ 1.9],
       [ 6.8],
       [ 3. ],
       [ 5.5],
       [ 2.1],
       [ 5.7],
       [ 2.5],
       [ 5. ],
       [ 2. ],
       [ 5.8],
       [ 2.8],
       [ 5.1],
       [ 2.4],
       [ 6.4],
       [ 3.2],
       [ 5.3],
       [ 2.3],
       [ 6.5],
       [ 3. ],
       [ 5.5],
       [ 1.8],
       [ 7.7],
       [ 3.8],
       [ 6.7],
       [ 2.2],
       [ 7.7],
       [ 2.6],
       [ 6.9],
       [ 2.3],
       [ 6. ],
       [ 2.2],
       [ 5. ],
       [ 1.5],
       [ 6.9],
       [ 3.2],
       [ 5.7],
       [ 2.3],
       [ 5.6],
       [ 2.8],
       [ 4.9],
       [ 2. ],
       [ 7.7],
       [ 2.8],
       [ 6.7],
       [ 2. ],
       [ 6.3],
       [ 2.7],
       [ 4.9],
       [ 1.8],
       [ 6.7],
       [ 3.3],
       [ 5.7],
       [ 2.1],
       [ 7.2],
       [ 3.2],
       [ 6. ],
       [ 1.8],
       [ 6.2],
       [ 2.8],
       [ 4.8],
       [ 1.8],
       [ 6.1],
       [ 3. ],
       [ 4.9],
       [ 1.8],
       [ 6.4],
       [ 2.8],
       [ 5.6],
       [ 2.1],
       [ 7.2],
       [ 3. ],
       [ 5.8],
       [ 1.6],
       [ 7.4],
       [ 2.8],
       [ 6.1],
       [ 1.9],
       [ 7.9],
       [ 3.8],
       [ 6.4],
       [ 2. ],
       [ 6.4],
       [ 2.8],
       [ 5.6],
       [ 2.2],
       [ 6.3],
       [ 2.8],
       [ 5.1],
       [ 1.5],
       [ 6.1],
       [ 2.6],
       [ 5.6],
       [ 1.4],
       [ 7.7],
       [ 3. ],
       [ 6.1],
       [ 2.3],
       [ 6.3],
       [ 3.4],
       [ 5.6],
       [ 2.4],
       [ 6.4],
       [ 3.1],
       [ 5.5],
       [ 1.8],
       [ 6. ],
       [ 3. ],
       [ 4.8],
       [ 1.8],
       [ 6.9],
       [ 3.1],
       [ 5.4],
       [ 2.1],
       [ 6.7],
       [ 3.1],
       [ 5.6],
       [ 2.4],
       [ 6.9],
       [ 3.1],
       [ 5.1],
       [ 2.3],
       [ 5.8],
       [ 2.7],
       [ 5.1],
       [ 1.9],
       [ 6.8],
       [ 3.2],
       [ 5.9],
       [ 2.3],
       [ 6.7],
       [ 3.3],
       [ 5.7],
       [ 2.5],
       [ 6.7],
       [ 3. ],
       [ 5.2],
       [ 2.3],
       [ 6.3],
       [ 2.5],
       [ 5. ],
       [ 1.9],
       [ 6.5],
       [ 3. ],
       [ 5.2],
       [ 2. ],
       [ 6.2],
       [ 3.4],
       [ 5.4],
       [ 2.3],
       [ 5.9],
       [ 3. ],
       [ 5.1],
       [ 1.8]])
#run this code in jupyter notebook and you get the predicted answer
knn.predict([2,3,1,4])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-19-72e13be58e6a> in <module>()
      1 #run this code in jupyter notebook and you get the predicted answer
----> 2 knn.predict([2,3,1,4])

/opt/conda/lib/python3.6/site-packages/sklearn/neighbors/classification.py in predict(self, X)
    141             Class labels for each data sample.
    142         """
--> 143         X = check_array(X, accept_sparse='csr')
    144 
    145         neigh_dist, neigh_ind = self.kneighbors(X)

/opt/conda/lib/python3.6/site-packages/sklearn/utils/validation.py in check_array(array, accept_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)
    465                     "Reshape your data either using array.reshape(-1, 1) if "
    466                     "your data has a single feature or array.reshape(1, -1) "
--> 467                     "if it contains a single sample.".format(array))
    468             array = np.atleast_2d(array)
    469             # To ensure that array flags are maintained

ValueError: Expected 2D array, got 1D array instead:
array=[2 3 1 4].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
iris['feature_names']
['sepal length (cm)',
 'sepal width (cm)',
 'petal length (cm)',
 'petal width (cm)']
plt.scatter(iris['sepal length (cm)'],y)
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-21-bb300da576a1> in <module>()
----> 1 plt.scatter(iris['sepal length (cm)'],y)

KeyError: 'sepal length (cm)'
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(X,y)
#predicting the data 
y_pred=logreg.predict(X)
y_pred
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
#to check the accuracy of prediction
from sklearn import metrics
print (metrics.accuracy_score(y,y_pred))
0.96
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(X,y)
y_pred= knn.predict(X)
print(metrics.accuracy_score(y,y_pred))
0.966666666667
#for different values of k we find different accuracies
 
